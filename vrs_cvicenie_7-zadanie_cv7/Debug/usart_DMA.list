
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b4  080027b4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080027b4  080027b4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b4  080027b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080027bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000068  08002824  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08002824  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163e  00000000  00000000  000260c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00027708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00027d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003471  00000000  00000000  00028320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005366  00000000  00000000  0002b791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000722ef  00000000  00000000  00030af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a2de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  000a2e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800271c 	.word	0x0800271c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800271c 	.word	0x0800271c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000270:	b480      	push	{r7}
 8000272:	b089      	sub	sp, #36	; 0x24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	2103      	movs	r1, #3
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	43db      	mvns	r3, r3
 800029c:	401a      	ands	r2, r3
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	fa93 f3a3 	rbit	r3, r3
 80002a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80002aa:	69bb      	ldr	r3, [r7, #24]
 80002ac:	fab3 f383 	clz	r3, r3
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	431a      	orrs	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	bf00      	nop
 80002c0:	3724      	adds	r7, #36	; 0x24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80002ca:	b480      	push	{r7}
 80002cc:	b085      	sub	sp, #20
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	60f8      	str	r0, [r7, #12]
 80002d2:	60b9      	str	r1, [r7, #8]
 80002d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	43db      	mvns	r3, r3
 80002de:	401a      	ands	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	fb01 f303 	mul.w	r3, r1, r3
 80002e8:	431a      	orrs	r2, r3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	605a      	str	r2, [r3, #4]
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b089      	sub	sp, #36	; 0x24
 80002fe:	af00      	add	r7, sp, #0
 8000300:	60f8      	str	r0, [r7, #12]
 8000302:	60b9      	str	r1, [r7, #8]
 8000304:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	fa93 f3a3 	rbit	r3, r3
 8000314:	613b      	str	r3, [r7, #16]
  return(result);
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	fab3 f383 	clz	r3, r3
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	2103      	movs	r1, #3
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	401a      	ands	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	fa93 f3a3 	rbit	r3, r3
 8000332:	61bb      	str	r3, [r7, #24]
  return(result);
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	fab3 f383 	clz	r3, r3
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	431a      	orrs	r2, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000348:	bf00      	nop
 800034a:	3724      	adds	r7, #36	; 0x24
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000354:	b480      	push	{r7}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa93 f3a3 	rbit	r3, r3
 800036e:	613b      	str	r3, [r7, #16]
  return(result);
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	fab3 f383 	clz	r3, r3
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	2103      	movs	r1, #3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	43db      	mvns	r3, r3
 8000380:	401a      	ands	r2, r3
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	fa93 f3a3 	rbit	r3, r3
 800038c:	61bb      	str	r3, [r7, #24]
  return(result);
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	fab3 f383 	clz	r3, r3
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	6879      	ldr	r1, [r7, #4]
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	431a      	orrs	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	60da      	str	r2, [r3, #12]
}
 80003a2:	bf00      	nop
 80003a4:	3724      	adds	r7, #36	; 0x24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b089      	sub	sp, #36	; 0x24
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	60b9      	str	r1, [r7, #8]
 80003b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6a1a      	ldr	r2, [r3, #32]
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	fa93 f3a3 	rbit	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  return(result);
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	fab3 f383 	clz	r3, r3
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	210f      	movs	r1, #15
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	401a      	ands	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	fa93 f3a3 	rbit	r3, r3
 80003e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	fab3 f383 	clz	r3, r3
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	431a      	orrs	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80003fc:	bf00      	nop
 80003fe:	3724      	adds	r7, #36	; 0x24
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000408:	b480      	push	{r7}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	fa93 f3a3 	rbit	r3, r3
 8000424:	613b      	str	r3, [r7, #16]
  return(result);
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	fab3 f383 	clz	r3, r3
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	210f      	movs	r1, #15
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	401a      	ands	r2, r3
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	0a1b      	lsrs	r3, r3, #8
 800043c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	fa93 f3a3 	rbit	r3, r3
 8000444:	61bb      	str	r3, [r7, #24]
  return(result);
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	fab3 f383 	clz	r3, r3
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	431a      	orrs	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800045a:	bf00      	nop
 800045c:	3724      	adds	r7, #36	; 0x24
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b088      	sub	sp, #32
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000470:	2300      	movs	r3, #0
 8000472:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	fa93 f3a3 	rbit	r3, r3
 8000484:	613b      	str	r3, [r7, #16]
  return(result);
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	fab3 f383 	clz	r3, r3
 800048c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800048e:	e048      	b.n	8000522 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	2101      	movs	r1, #1
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	4013      	ands	r3, r2
 800049e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d03a      	beq.n	800051c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	461a      	mov	r2, r3
 80004ac:	69b9      	ldr	r1, [r7, #24]
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff fede 	bl	8000270 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d003      	beq.n	80004c4 <LL_GPIO_Init+0x5e>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d106      	bne.n	80004d2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	461a      	mov	r2, r3
 80004ca:	69b9      	ldr	r1, [r7, #24]
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff14 	bl	80002fa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	461a      	mov	r2, r3
 80004d8:	69b9      	ldr	r1, [r7, #24]
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff ff3a 	bl	8000354 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d119      	bne.n	800051c <LL_GPIO_Init+0xb6>
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	fa93 f3a3 	rbit	r3, r3
 80004f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80004f4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80004f6:	fab3 f383 	clz	r3, r3
 80004fa:	2b07      	cmp	r3, #7
 80004fc:	d807      	bhi.n	800050e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	461a      	mov	r2, r3
 8000504:	69b9      	ldr	r1, [r7, #24]
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ff51 	bl	80003ae <LL_GPIO_SetAFPin_0_7>
 800050c:	e006      	b.n	800051c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	461a      	mov	r2, r3
 8000514:	69b9      	ldr	r1, [r7, #24]
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff76 	bl	8000408 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	3301      	adds	r3, #1
 8000520:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	fa22 f303 	lsr.w	r3, r2, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1af      	bne.n	8000490 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d003      	beq.n	8000540 <LL_GPIO_Init+0xda>
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d107      	bne.n	8000550 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	461a      	mov	r2, r3
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff febd 	bl	80002ca <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_RCC_HSI_IsReady+0x20>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	2b02      	cmp	r3, #2
 800056a:	bf0c      	ite	eq
 800056c:	2301      	moveq	r3, #1
 800056e:	2300      	movne	r3, #0
 8000570:	b2db      	uxtb	r3, r3
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <LL_RCC_LSE_IsReady+0x20>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b02      	cmp	r3, #2
 800058e:	bf0c      	ite	eq
 8000590:	2301      	moveq	r3, #1
 8000592:	2300      	movne	r3, #0
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000

080005a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_RCC_GetSysClkSource+0x18>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f003 030c 	and.w	r3, r3, #12
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <LL_RCC_GetAHBPrescaler+0x18>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_RCC_GetAPB2Prescaler+0x18>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <LL_RCC_GetUSARTClockSource+0x28>)
 800061e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000620:	2103      	movs	r1, #3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	401a      	ands	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	061b      	lsls	r3, r3, #24
 800062e:	4313      	orrs	r3, r2
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000

08000640 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_RCC_PLL_GetMainSource+0x18>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <LL_RCC_PLL_GetPrediv+0x18>)
 800067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000680:	f003 030f 	and.w	r3, r3, #15
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800069c:	f000 f864 	bl	8000768 <RCC_GetSystemClockFreq>
 80006a0:	4602      	mov	r2, r0
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f882 	bl	80007b4 <RCC_GetHCLKClockFreq>
 80006b0:	4602      	mov	r2, r0
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f890 	bl	80007e0 <RCC_GetPCLK1ClockFreq>
 80006c0:	4602      	mov	r2, r0
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f89c 	bl	8000808 <RCC_GetPCLK2ClockFreq>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60da      	str	r2, [r3, #12]
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d12d      	bne.n	800074e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff8e 	bl	8000614 <LL_RCC_GetUSARTClockSource>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d00a      	beq.n	8000714 <LL_RCC_GetUSARTClockFreq+0x34>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d819      	bhi.n	8000736 <LL_RCC_GetUSARTClockFreq+0x56>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d002      	beq.n	800070c <LL_RCC_GetUSARTClockFreq+0x2c>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d00c      	beq.n	8000724 <LL_RCC_GetUSARTClockFreq+0x44>
 800070a:	e014      	b.n	8000736 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800070c:	f000 f82c 	bl	8000768 <RCC_GetSystemClockFreq>
 8000710:	60f8      	str	r0, [r7, #12]
        break;
 8000712:	e021      	b.n	8000758 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000714:	f7ff ff22 	bl	800055c <LL_RCC_HSI_IsReady>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d019      	beq.n	8000752 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <LL_RCC_GetUSARTClockFreq+0x84>)
 8000720:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000722:	e016      	b.n	8000752 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000724:	f7ff ff2c 	bl	8000580 <LL_RCC_LSE_IsReady>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d013      	beq.n	8000756 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800072e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000732:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000734:	e00f      	b.n	8000756 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000736:	f000 f817 	bl	8000768 <RCC_GetSystemClockFreq>
 800073a:	4603      	mov	r3, r0
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f839 	bl	80007b4 <RCC_GetHCLKClockFreq>
 8000742:	4603      	mov	r3, r0
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f84b 	bl	80007e0 <RCC_GetPCLK1ClockFreq>
 800074a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800074c:	e004      	b.n	8000758 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800074e:	bf00      	nop
 8000750:	e002      	b.n	8000758 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8000752:	bf00      	nop
 8000754:	e000      	b.n	8000758 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8000756:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8000758:	68fb      	ldr	r3, [r7, #12]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	007a1200 	.word	0x007a1200

08000768 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000772:	f7ff ff17 	bl	80005a4 <LL_RCC_GetSysClkSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b08      	cmp	r3, #8
 800077a:	d00c      	beq.n	8000796 <RCC_GetSystemClockFreq+0x2e>
 800077c:	2b08      	cmp	r3, #8
 800077e:	d80e      	bhi.n	800079e <RCC_GetSystemClockFreq+0x36>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <RCC_GetSystemClockFreq+0x22>
 8000784:	2b04      	cmp	r3, #4
 8000786:	d003      	beq.n	8000790 <RCC_GetSystemClockFreq+0x28>
 8000788:	e009      	b.n	800079e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <RCC_GetSystemClockFreq+0x48>)
 800078c:	607b      	str	r3, [r7, #4]
      break;
 800078e:	e009      	b.n	80007a4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <RCC_GetSystemClockFreq+0x48>)
 8000792:	607b      	str	r3, [r7, #4]
      break;
 8000794:	e006      	b.n	80007a4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000796:	f000 f84b 	bl	8000830 <RCC_PLL_GetFreqDomain_SYS>
 800079a:	6078      	str	r0, [r7, #4]
      break;
 800079c:	e002      	b.n	80007a4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <RCC_GetSystemClockFreq+0x48>)
 80007a0:	607b      	str	r3, [r7, #4]
      break;
 80007a2:	bf00      	nop
  }

  return frequency;
 80007a4:	687b      	ldr	r3, [r7, #4]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	007a1200 	.word	0x007a1200

080007b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80007bc:	f7ff ff00 	bl	80005c0 <LL_RCC_GetAHBPrescaler>
 80007c0:	4603      	mov	r3, r0
 80007c2:	091b      	lsrs	r3, r3, #4
 80007c4:	f003 030f 	and.w	r3, r3, #15
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <RCC_GetHCLKClockFreq+0x28>)
 80007ca:	5cd3      	ldrb	r3, [r2, r3]
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	40d3      	lsrs	r3, r2
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	08002760 	.word	0x08002760

080007e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80007e8:	f7ff fef8 	bl	80005dc <LL_RCC_GetAPB1Prescaler>
 80007ec:	4603      	mov	r3, r0
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <RCC_GetPCLK1ClockFreq+0x24>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	461a      	mov	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	40d3      	lsrs	r3, r2
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	08002770 	.word	0x08002770

08000808 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000810:	f7ff fef2 	bl	80005f8 <LL_RCC_GetAPB2Prescaler>
 8000814:	4603      	mov	r3, r0
 8000816:	0adb      	lsrs	r3, r3, #11
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <RCC_GetPCLK2ClockFreq+0x24>)
 800081a:	5cd3      	ldrb	r3, [r2, r3]
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	40d3      	lsrs	r3, r2
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	08002770 	.word	0x08002770

08000830 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800083e:	f7ff feff 	bl	8000640 <LL_RCC_PLL_GetMainSource>
 8000842:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000850:	d003      	beq.n	800085a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000852:	e005      	b.n	8000860 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000856:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000858:	e005      	b.n	8000866 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800085c:	60fb      	str	r3, [r7, #12]
      break;
 800085e:	e002      	b.n	8000866 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000862:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000864:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8000866:	f7ff ff07 	bl	8000678 <LL_RCC_PLL_GetPrediv>
 800086a:	4603      	mov	r3, r0
 800086c:	3301      	adds	r3, #1
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	fbb2 f4f3 	udiv	r4, r2, r3
 8000874:	f7ff fef2 	bl	800065c <LL_RCC_PLL_GetMultiplicator>
 8000878:	4603      	mov	r3, r0
 800087a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800087e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000882:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	fa92 f2a2 	rbit	r2, r2
 800088a:	603a      	str	r2, [r7, #0]
  return(result);
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	fab2 f282 	clz	r2, r2
 8000892:	40d3      	lsrs	r3, r2
 8000894:	3302      	adds	r3, #2
 8000896:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	bf00      	nop
 80008a4:	003d0900 	.word	0x003d0900
 80008a8:	007a1200 	.word	0x007a1200

080008ac <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	2b01      	cmp	r3, #1
 80008be:	bf0c      	ite	eq
 80008c0:	2301      	moveq	r3, #1
 80008c2:	2300      	movne	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	431a      	orrs	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	605a      	str	r2, [r3, #4]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	431a      	orrs	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	609a      	str	r2, [r3, #8]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800091e:	b4b0      	push	{r4, r5, r7}
 8000920:	b085      	sub	sp, #20
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 800092c:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 800092e:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000936:	d114      	bne.n	8000962 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	005a      	lsls	r2, r3, #1
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	085b      	lsrs	r3, r3, #1
 8000940:	441a      	add	r2, r3
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	fbb2 f3f3 	udiv	r3, r2, r3
 8000948:	b29b      	uxth	r3, r3
 800094a:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 800094c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8000950:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000952:	086b      	lsrs	r3, r5, #1
 8000954:	b29b      	uxth	r3, r3
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8000960:	e00a      	b.n	8000978 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	085a      	lsrs	r2, r3, #1
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	441a      	add	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000970:	b29b      	uxth	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	60da      	str	r2, [r3, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bcb0      	pop	{r4, r5, r7}
 8000980:	4770      	bx	lr
	...

08000984 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff88 	bl	80008ac <LL_USART_IsEnabled>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14e      	bne.n	8000a40 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <LL_USART_Init+0xc8>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	6851      	ldr	r1, [r2, #4]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	68d2      	ldr	r2, [r2, #12]
 80009b2:	4311      	orrs	r1, r2
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	6912      	ldr	r2, [r2, #16]
 80009b8:	4311      	orrs	r1, r2
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	6992      	ldr	r2, [r2, #24]
 80009be:	430a      	orrs	r2, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	4619      	mov	r1, r3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff80 	bl	80008d2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4619      	mov	r1, r3
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff8d 	bl	80008f8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <LL_USART_Init+0xcc>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d104      	bne.n	80009f0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff fe7a 	bl	80006e0 <LL_RCC_GetUSARTClockFreq>
 80009ec:	61b8      	str	r0, [r7, #24]
 80009ee:	e016      	b.n	8000a1e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <LL_USART_Init+0xd0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d107      	bne.n	8000a08 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe49 	bl	8000694 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	e00a      	b.n	8000a1e <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <LL_USART_Init+0xd4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d106      	bne.n	8000a1e <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe3d 	bl	8000694 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00d      	beq.n	8000a40 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d009      	beq.n	8000a40 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	69b9      	ldr	r1, [r7, #24]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff6f 	bl	800091e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000a40:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	efff69f3 	.word	0xefff69f3
 8000a50:	40013800 	.word	0x40013800
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40004800 	.word	0x40004800

08000a5c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <LL_InitTick+0x30>)
 8000a70:	3b01      	subs	r3, #1
 8000a72:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <LL_InitTick+0x30>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <LL_InitTick+0x30>)
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000a98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffdd 	bl	8000a5c <LL_InitTick>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <LL_mDelay+0x48>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000aba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac2:	d00c      	beq.n	8000ade <LL_mDelay+0x32>
  {
    Delay++;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000aca:	e008      	b.n	8000ade <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <LL_mDelay+0x48>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <LL_mDelay+0x32>
    {
      Delay--;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1f3      	bne.n	8000acc <LL_mDelay+0x20>
    }
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <LL_SetSystemCoreClock+0x1c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000

08000b18 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <NVIC_EnableIRQ+0x30>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da0b      	bge.n	8000b78 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <NVIC_SetPriority+0x4c>)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	3b04      	subs	r3, #4
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b76:	e009      	b.n	8000b8c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <NVIC_SetPriority+0x50>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bb6:	695a      	ldr	r2, [r3, #20]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ffe3 	bl	8000ba0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2010      	movs	r0, #16
 8000bde:	f7ff ffb5 	bl	8000b4c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000be2:	2010      	movs	r0, #16
 8000be4:	f7ff ff98 	bl	8000b18 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2011      	movs	r0, #17
 8000bec:	f7ff ffae 	bl	8000b4c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000bf0:	2011      	movs	r0, #17
 8000bf2:	f7ff ff91 	bl	8000b18 <NVIC_EnableIRQ>

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <LL_AHB1_GRP1_EnableClock>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c12:	695a      	ldr	r2, [r3, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4013      	ands	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000

08000c2c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c62:	f7ff ffcb 	bl	8000bfc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c66:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c6a:	f7ff ffc7 	bl	8000bfc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8000c6e:	2108      	movs	r1, #8
 8000c70:	480a      	ldr	r0, [pc, #40]	; (8000c9c <MX_GPIO_Init+0x54>)
 8000c72:	f7ff ffdb 	bl	8000c2c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000c76:	2308      	movs	r3, #8
 8000c78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MX_GPIO_Init+0x54>)
 8000c90:	f7ff fbe9 	bl	8000466 <LL_GPIO_Init>

}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <NVIC_SetPriorityGrouping>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <LL_DMA_GetDataLength+0x28>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	08002750 	.word	0x08002750

08000d14 <LL_RCC_HSI_Enable>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <LL_RCC_HSI_Enable+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <LL_RCC_HSI_Enable+0x1c>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <LL_RCC_HSI_IsReady>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <LL_RCC_HSI_IsReady+0x20>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000

08000d58 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <LL_RCC_SetSysClkSource>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <LL_RCC_SetSysClkSource+0x24>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f023 0203 	bic.w	r2, r3, #3
 8000d94:	4904      	ldr	r1, [pc, #16]	; (8000da8 <LL_RCC_SetSysClkSource+0x24>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <LL_RCC_GetSysClkSource>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <LL_RCC_GetSysClkSource+0x18>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <LL_RCC_SetAHBPrescaler>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <LL_RCC_SetAHBPrescaler+0x24>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd8:	4904      	ldr	r1, [pc, #16]	; (8000dec <LL_RCC_SetAHBPrescaler+0x24>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000

08000df0 <LL_RCC_SetAPB1Prescaler>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e00:	4904      	ldr	r1, [pc, #16]	; (8000e14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40021000 	.word	0x40021000

08000e18 <LL_RCC_SetAPB2Prescaler>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e28:	4904      	ldr	r1, [pc, #16]	; (8000e3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000

08000e40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e4a:	69da      	ldr	r2, [r3, #28]
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e56:	69da      	ldr	r2, [r3, #28]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000

08000e70 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <LL_FLASH_SetLatency+0x24>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 0207 	bic.w	r2, r3, #7
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <LL_FLASH_SetLatency+0x24>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <LL_FLASH_GetLatency+0x18>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d106      	bne.n	8000f00 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <LL_SYSTICK_SetClkSource+0x34>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <LL_SYSTICK_SetClkSource+0x34>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000efe:	e005      	b.n	8000f0c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <LL_SYSTICK_SetClkSource+0x34>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <LL_SYSTICK_SetClkSource+0x34>)
 8000f06:	f023 0304 	bic.w	r3, r3, #4
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <main>:
letter_count_ all_leters;
	// type your global variables here:


int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff ffa4 	bl	8000e70 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f2c:	f7ff ff88 	bl	8000e40 <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff feb5 	bl	8000ca0 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f837 	bl	8000fa8 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f7ff fe85 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3e:	f7ff fe47 	bl	8000bd0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f42:	f000 fdf7 	bl	8001b34 <MX_USART2_UART_Init>

  /* Space for your local variables, callback registration ...*/
  	  int zaplnene = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  	  int int_text = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  	  leters.capital_letter = 0;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <main+0x78>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	705a      	strb	r2, [r3, #1]
  	  leters.small_letter = 0;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <main+0x78>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
  	  USART2_RegisterCallback(proccesDmaData);
 8000f5a:	480f      	ldr	r0, [pc, #60]	; (8000f98 <main+0x7c>)
 8000f5c:	f000 fdd8 	bl	8001b10 <USART2_RegisterCallback>
	  /* Periodic transmission of information about DMA Rx buffer state.
	   * Transmission frequency - 5Hz.
	   * Message format - "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %]: %f%"
	   * Example message (what I wish to see in terminal) - Buffer capacity: 1000 bytes, occupied memory: 231 bytes, load [in %]: 23.1%
	   */
	  LL_mDelay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f7ff fda2 	bl	8000aac <LL_mDelay>
	  zaplnene = (DMA_USART2_BUFFER_SIZE-LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6));
 8000f68:	2106      	movs	r1, #6
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <main+0x80>)
 8000f6c:	f7ff febc 	bl	8000ce8 <LL_DMA_GetDataLength>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f76:	607b      	str	r3, [r7, #4]
	  int_text = sprintf(length_bytes,"\n Miesto v buffery:%d z 255",zaplnene);
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4909      	ldr	r1, [pc, #36]	; (8000fa0 <main+0x84>)
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <main+0x88>)
 8000f7e:	f000 ff9f 	bl	8001ec0 <siprintf>
 8000f82:	6038      	str	r0, [r7, #0]
	  USART2_PutBuffer(length_bytes, int_text);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <main+0x88>)
 8000f8c:	f000 feb4 	bl	8001cf8 <USART2_PutBuffer>
	  LL_mDelay(500);
 8000f90:	e7e6      	b.n	8000f60 <main+0x44>
 8000f92:	bf00      	nop
 8000f94:	200002a4 	.word	0x200002a4
 8000f98:	08001015 	.word	0x08001015
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	08002734 	.word	0x08002734
 8000fa4:	200001a0 	.word	0x200001a0

08000fa8 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ff77 	bl	8000ea0 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000fb2:	f7ff ff89 	bl	8000ec8 <LL_FLASH_GetLatency>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000fbc:	f000 f896 	bl	80010ec <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000fc0:	f7ff fea8 	bl	8000d14 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000fc4:	bf00      	nop
 8000fc6:	f7ff feb5 	bl	8000d34 <LL_RCC_HSI_IsReady>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d1fa      	bne.n	8000fc6 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f7ff fec1 	bl	8000d58 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fef6 	bl	8000dc8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff ff07 	bl	8000df0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff ff18 	bl	8000e18 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fecb 	bl	8000d84 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000fee:	bf00      	nop
 8000ff0:	f7ff fedc 	bl	8000dac <LL_RCC_GetSysClkSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1fa      	bne.n	8000ff0 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <SystemClock_Config+0x68>)
 8000ffc:	f7ff fd48 	bl	8000a90 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001000:	2004      	movs	r0, #4
 8001002:	f7ff ff6f 	bl	8000ee4 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001006:	4802      	ldr	r0, [pc, #8]	; (8001010 <SystemClock_Config+0x68>)
 8001008:	f7ff fd76 	bl	8000af8 <LL_SetSystemCoreClock>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	007a1200 	.word	0x007a1200

08001014 <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(uint8_t sign)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	/* Process received data */
	dataRX[index_1] = sign;
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <proccesDmaData+0xc0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <proccesDmaData+0xc4>)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	5453      	strb	r3, [r2, r1]
	if(dataRX[index_1] == '#'){
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <proccesDmaData+0xc0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <proccesDmaData+0xc4>)
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	2b23      	cmp	r3, #35	; 0x23
 8001036:	d106      	bne.n	8001046 <proccesDmaData+0x32>
		trigger = 1;
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <proccesDmaData+0xc8>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
		index_2 = index_1;
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <proccesDmaData+0xc0>)
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <proccesDmaData+0xcc>)
 8001044:	701a      	strb	r2, [r3, #0]
	}
	if(trigger){
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <proccesDmaData+0xc8>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d02f      	beq.n	80010ae <proccesDmaData+0x9a>
		if(sign >= 65 && sign <= 90 ){
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b40      	cmp	r3, #64	; 0x40
 8001052:	d908      	bls.n	8001066 <proccesDmaData+0x52>
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b5a      	cmp	r3, #90	; 0x5a
 8001058:	d805      	bhi.n	8001066 <proccesDmaData+0x52>
			leters.capital_letter += 1;}
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <proccesDmaData+0xd0>)
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	3301      	adds	r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <proccesDmaData+0xd0>)
 8001064:	705a      	strb	r2, [r3, #1]
		if(sign >= 97 && sign <= 122){
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b60      	cmp	r3, #96	; 0x60
 800106a:	d908      	bls.n	800107e <proccesDmaData+0x6a>
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b7a      	cmp	r3, #122	; 0x7a
 8001070:	d805      	bhi.n	800107e <proccesDmaData+0x6a>
			leters.small_letter += 1;}
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <proccesDmaData+0xd0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <proccesDmaData+0xd0>)
 800107c:	701a      	strb	r2, [r3, #0]
		if(sign == '$' || ((index_1-index_2) == 35 )){
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b24      	cmp	r3, #36	; 0x24
 8001082:	d007      	beq.n	8001094 <proccesDmaData+0x80>
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <proccesDmaData+0xc0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <proccesDmaData+0xcc>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b23      	cmp	r3, #35	; 0x23
 8001092:	d10c      	bne.n	80010ae <proccesDmaData+0x9a>
			all_leters = leters;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <proccesDmaData+0xd4>)
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <proccesDmaData+0xd0>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	8013      	strh	r3, [r2, #0]
			leters.small_letter=0;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <proccesDmaData+0xd0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
			leters.capital_letter=0;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <proccesDmaData+0xd0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	705a      	strb	r2, [r3, #1]
			trigger = 0;}
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <proccesDmaData+0xc8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	}
	if(dataRX == DMA_USART2_BUFFER_SIZE){
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <proccesDmaData+0xc4>)
 80010b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010b4:	d102      	bne.n	80010bc <proccesDmaData+0xa8>
		index_1 = 0;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <proccesDmaData+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
	}
	index_1 += 1;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <proccesDmaData+0xc0>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <proccesDmaData+0xc0>)
 80010c6:	701a      	strb	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000084 	.word	0x20000084
 80010d8:	200000a0 	.word	0x200000a0
 80010dc:	20000086 	.word	0x20000086
 80010e0:	20000085 	.word	0x20000085
 80010e4:	200002a4 	.word	0x200002a4
 80010e8:	200002a0 	.word	0x200002a0

080010ec <Error_Handler>:


void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <LL_DMA_DisableChannel>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LL_DMA_DisableChannel+0x3c>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	3a01      	subs	r2, #1
 800111a:	4907      	ldr	r1, [pc, #28]	; (8001138 <LL_DMA_DisableChannel+0x3c>)
 800111c:	5c8a      	ldrb	r2, [r1, r2]
 800111e:	4611      	mov	r1, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	440a      	add	r2, r1
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	6013      	str	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	08002758 	.word	0x08002758

0800113c <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001150:	bf0c      	ite	eq
 8001152:	2301      	moveq	r3, #1
 8001154:	2300      	movne	r3, #0
 8001156:	b2db      	uxtb	r3, r3
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	b2db      	uxtb	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a0:	bf0c      	ite	eq
 80011a2:	2301      	moveq	r3, #1
 80011a4:	2300      	movne	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011c2:	605a      	str	r2, [r3, #4]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011de:	605a      	str	r2, [r3, #4]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b10      	cmp	r3, #16
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123e:	2b40      	cmp	r3, #64	; 0x40
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2210      	movs	r2, #16
 8001260:	621a      	str	r2, [r3, #32]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <HardFault_Handler+0x4>

08001282 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <BusFault_Handler+0x4>

0800128e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <UsageFault_Handler+0x4>

08001294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <DMA1_Channel6_IRQHandler+0x38>)
 80012d2:	f7ff ff33 	bl	800113c <LL_DMA_IsActiveFlag_TC6>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80012dc:	f000 fd2c 	bl	8001d38 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <DMA1_Channel6_IRQHandler+0x38>)
 80012e2:	f7ff ff67 	bl	80011b4 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80012e6:	e00a      	b.n	80012fe <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80012e8:	4806      	ldr	r0, [pc, #24]	; (8001304 <DMA1_Channel6_IRQHandler+0x38>)
 80012ea:	f7ff ff4f 	bl	800118c <LL_DMA_IsActiveFlag_HT6>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d104      	bne.n	80012fe <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80012f4:	f000 fd20 	bl	8001d38 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <DMA1_Channel6_IRQHandler+0x38>)
 80012fa:	f7ff ff77 	bl	80011ec <LL_DMA_ClearFlag_HT6>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020000 	.word	0x40020000

08001308 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 800130c:	480a      	ldr	r0, [pc, #40]	; (8001338 <DMA1_Channel7_IRQHandler+0x30>)
 800130e:	f7ff ff29 	bl	8001164 <LL_DMA_IsActiveFlag_TC7>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10d      	bne.n	8001334 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <DMA1_Channel7_IRQHandler+0x30>)
 800131a:	f7ff ff59 	bl	80011d0 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800131e:	bf00      	nop
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <DMA1_Channel7_IRQHandler+0x34>)
 8001322:	f7ff ff84 	bl	800122e <LL_USART_IsActiveFlag_TC>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f9      	beq.n	8001320 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 800132c:	2107      	movs	r1, #7
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <DMA1_Channel7_IRQHandler+0x30>)
 8001330:	f7ff fee4 	bl	80010fc <LL_DMA_DisableChannel>
	}
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40020000 	.word	0x40020000
 800133c:	40004400 	.word	0x40004400

08001340 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <USART2_IRQHandler+0x20>)
 8001346:	f7ff ff5f 	bl	8001208 <LL_USART_IsActiveFlag_IDLE>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001350:	f000 fcf2 	bl	8001d38 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <USART2_IRQHandler+0x20>)
 8001356:	f7ff ff7d 	bl	8001254 <LL_USART_ClearFlag_IDLE>
	}
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40004400 	.word	0x40004400

08001364 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x50>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x16>
		heap_end = &end;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <_sbrk+0x50>)
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <_sbrk+0x54>)
 8001378:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <_sbrk+0x50>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <_sbrk+0x50>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	466a      	mov	r2, sp
 800138a:	4293      	cmp	r3, r2
 800138c:	d907      	bls.n	800139e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800138e:	f000 fd6d 	bl	8001e6c <__errno>
 8001392:	4603      	mov	r3, r0
 8001394:	220c      	movs	r2, #12
 8001396:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	e006      	b.n	80013ac <_sbrk+0x48>
	}

	heap_end += incr;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <_sbrk+0x50>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <_sbrk+0x50>)
 80013a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000088 	.word	0x20000088
 80013b8:	200003b8 	.word	0x200003b8

080013bc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <SystemInit+0x84>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <SystemInit+0x84>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <SystemInit+0x88>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <SystemInit+0x88>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <SystemInit+0x88>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4918      	ldr	r1, [pc, #96]	; (8001444 <SystemInit+0x88>)
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <SystemInit+0x8c>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <SystemInit+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <SystemInit+0x88>)
 80013ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <SystemInit+0x88>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a11      	ldr	r2, [pc, #68]	; (8001444 <SystemInit+0x88>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001402:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <SystemInit+0x88>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <SystemInit+0x88>)
 800140a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800140e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <SystemInit+0x88>)
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <SystemInit+0x88>)
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <SystemInit+0x88>)
 800141e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001420:	4908      	ldr	r1, [pc, #32]	; (8001444 <SystemInit+0x88>)
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <SystemInit+0x90>)
 8001424:	4013      	ands	r3, r2
 8001426:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x88>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SystemInit+0x84>)
 8001430:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001434:	609a      	str	r2, [r3, #8]
#endif
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	40021000 	.word	0x40021000
 8001448:	f87fc00c 	.word	0xf87fc00c
 800144c:	ff00fccc 	.word	0xff00fccc

08001450 <NVIC_EnableIRQ>:
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <NVIC_EnableIRQ+0x30>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <NVIC_SetPriority>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da0b      	bge.n	80014b0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <NVIC_SetPriority+0x4c>)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	3b04      	subs	r3, #4
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	761a      	strb	r2, [r3, #24]
}
 80014ae:	e009      	b.n	80014c4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <NVIC_SetPriority+0x50>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <LL_DMA_EnableChannel>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LL_DMA_EnableChannel+0x3c>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	3a01      	subs	r2, #1
 80014f6:	4907      	ldr	r1, [pc, #28]	; (8001514 <LL_DMA_EnableChannel+0x3c>)
 80014f8:	5c8a      	ldrb	r2, [r1, r2]
 80014fa:	4611      	mov	r1, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	440a      	add	r2, r1
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	08002778 	.word	0x08002778

08001518 <LL_DMA_DisableChannel>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LL_DMA_DisableChannel+0x3c>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	3a01      	subs	r2, #1
 8001536:	4907      	ldr	r1, [pc, #28]	; (8001554 <LL_DMA_DisableChannel+0x3c>)
 8001538:	5c8a      	ldrb	r2, [r1, r2]
 800153a:	4611      	mov	r1, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	440a      	add	r2, r1
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6013      	str	r3, [r2, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	08002778 	.word	0x08002778

08001558 <LL_DMA_SetDataTransferDirection>:
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3b01      	subs	r3, #1
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <LL_DMA_SetDataTransferDirection+0x48>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001578:	f023 0310 	bic.w	r3, r3, #16
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	3a01      	subs	r2, #1
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <LL_DMA_SetDataTransferDirection+0x48>)
 8001582:	5c8a      	ldrb	r2, [r1, r2]
 8001584:	4611      	mov	r1, r2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	440a      	add	r2, r1
 800158a:	4611      	mov	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	08002778 	.word	0x08002778

080015a4 <LL_DMA_GetDataTransferDirection>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <LL_DMA_GetDataTransferDirection+0x2c>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f244 0310 	movw	r3, #16400	; 0x4010
 80015c2:	4013      	ands	r3, r2
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	08002778 	.word	0x08002778

080015d4 <LL_DMA_SetMode>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <LL_DMA_SetMode+0x44>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	461a      	mov	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 0220 	bic.w	r2, r3, #32
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <LL_DMA_SetMode+0x44>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	4619      	mov	r1, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	440b      	add	r3, r1
 8001602:	4619      	mov	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	08002778 	.word	0x08002778

0800161c <LL_DMA_SetPeriphIncMode>:
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <LL_DMA_SetPeriphIncMode+0x44>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	3b01      	subs	r3, #1
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <LL_DMA_SetPeriphIncMode+0x44>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	4619      	mov	r1, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	440b      	add	r3, r1
 800164a:	4619      	mov	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	08002778 	.word	0x08002778

08001664 <LL_DMA_SetMemoryIncMode>:
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3b01      	subs	r3, #1
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	461a      	mov	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3b01      	subs	r3, #1
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <LL_DMA_SetMemoryIncMode+0x44>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	4619      	mov	r1, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	440b      	add	r3, r1
 8001692:	4619      	mov	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	08002778 	.word	0x08002778

080016ac <LL_DMA_SetPeriphSize>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <LL_DMA_SetPeriphSize+0x44>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	461a      	mov	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <LL_DMA_SetPeriphSize+0x44>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	4619      	mov	r1, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	440b      	add	r3, r1
 80016da:	4619      	mov	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	08002778 	.word	0x08002778

080016f4 <LL_DMA_SetMemorySize>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3b01      	subs	r3, #1
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <LL_DMA_SetMemorySize+0x44>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	461a      	mov	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3b01      	subs	r3, #1
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <LL_DMA_SetMemorySize+0x44>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	4619      	mov	r1, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	440b      	add	r3, r1
 8001722:	4619      	mov	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	08002778 	.word	0x08002778

0800173c <LL_DMA_SetChannelPriorityLevel>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	3b01      	subs	r3, #1
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3b01      	subs	r3, #1
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	4619      	mov	r1, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	440b      	add	r3, r1
 800176a:	4619      	mov	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	08002778 	.word	0x08002778

08001784 <LL_DMA_SetDataLength>:
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	3b01      	subs	r3, #1
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <LL_DMA_SetDataLength+0x44>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	3a01      	subs	r2, #1
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <LL_DMA_SetDataLength+0x44>)
 80017aa:	5c8a      	ldrb	r2, [r1, r2]
 80017ac:	4611      	mov	r1, r2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	440a      	add	r2, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	08002778 	.word	0x08002778

080017cc <LL_DMA_GetDataLength>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <LL_DMA_GetDataLength+0x28>)
 80017dc:	5cd3      	ldrb	r3, [r2, r3]
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	b29b      	uxth	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	08002778 	.word	0x08002778

080017f8 <LL_DMA_ConfigAddresses>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b10      	cmp	r3, #16
 800180a:	d114      	bne.n	8001836 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3b01      	subs	r3, #1
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <LL_DMA_ConfigAddresses+0x74>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3b01      	subs	r3, #1
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <LL_DMA_ConfigAddresses+0x74>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6093      	str	r3, [r2, #8]
}
 8001834:	e013      	b.n	800185e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <LL_DMA_ConfigAddresses+0x74>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	461a      	mov	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3b01      	subs	r3, #1
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <LL_DMA_ConfigAddresses+0x74>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	60d3      	str	r3, [r2, #12]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	08002778 	.word	0x08002778

08001870 <LL_DMA_SetMemoryAddress>:
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3b01      	subs	r3, #1
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <LL_DMA_SetMemoryAddress+0x2c>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	461a      	mov	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	08002778 	.word	0x08002778

080018a0 <LL_DMA_SetPeriphAddress>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <LL_DMA_SetPeriphAddress+0x2c>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	461a      	mov	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6093      	str	r3, [r2, #8]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	08002778 	.word	0x08002778

080018d0 <LL_DMA_IsActiveFlag_TC6>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <LL_DMA_EnableIT_TC+0x3c>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	3a01      	subs	r2, #1
 8001916:	4907      	ldr	r1, [pc, #28]	; (8001934 <LL_DMA_EnableIT_TC+0x3c>)
 8001918:	5c8a      	ldrb	r2, [r1, r2]
 800191a:	4611      	mov	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	440a      	add	r2, r1
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	08002778 	.word	0x08002778

08001938 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LL_DMA_EnableIT_HT+0x3c>)
 8001948:	5cd3      	ldrb	r3, [r2, r3]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	3a01      	subs	r2, #1
 8001956:	4907      	ldr	r1, [pc, #28]	; (8001974 <LL_DMA_EnableIT_HT+0x3c>)
 8001958:	5c8a      	ldrb	r2, [r1, r2]
 800195a:	4611      	mov	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	440a      	add	r2, r1
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6013      	str	r3, [r2, #0]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	08002778 	.word	0x08002778

08001978 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <LL_DMA_EnableIT_TE+0x3c>)
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	3a01      	subs	r2, #1
 8001996:	4907      	ldr	r1, [pc, #28]	; (80019b4 <LL_DMA_EnableIT_TE+0x3c>)
 8001998:	5c8a      	ldrb	r2, [r1, r2]
 800199a:	4611      	mov	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	440a      	add	r2, r1
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6013      	str	r3, [r2, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	08002778 	.word	0x08002778

080019b8 <LL_AHB1_GRP1_EnableClock>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4013      	ands	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000

080019e8 <LL_APB1_GRP1_EnableClock>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000

08001a18 <LL_USART_Enable>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_USART_ConfigAsyncMode>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f043 0210 	orr.w	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001ae4:	b490      	push	{r4, r7}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8001aee:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d103      	bne.n	8001afe <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3328      	adds	r3, #40	; 0x28
 8001afa:	461c      	mov	r4, r3
 8001afc:	e002      	b.n	8001b04 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3324      	adds	r3, #36	; 0x24
 8001b02:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8001b04:	4623      	mov	r3, r4
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc90      	pop	{r4, r7}
 8001b0e:	4770      	bx	lr

08001b10 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <USART2_RegisterCallback+0x20>)
 8001b22:	6013      	str	r3, [r2, #0]
	}
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	2000008c 	.word	0x2000008c

08001b34 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b090      	sub	sp, #64	; 0x40
 8001b38:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b62:	f7ff ff41 	bl	80019e8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b66:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b6a:	f7ff ff25 	bl	80019b8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001b6e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b74:	2302      	movs	r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b84:	2307      	movs	r3, #7
 8001b86:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b90:	f7fe fc69 	bl	8000466 <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2106      	movs	r1, #6
 8001b98:	4854      	ldr	r0, [pc, #336]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001b9a:	f7ff fcdd 	bl	8001558 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba2:	2106      	movs	r1, #6
 8001ba4:	4851      	ldr	r0, [pc, #324]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001ba6:	f7ff fdc9 	bl	800173c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2106      	movs	r1, #6
 8001bae:	484f      	ldr	r0, [pc, #316]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001bb0:	f7ff fd10 	bl	80015d4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2106      	movs	r1, #6
 8001bb8:	484c      	ldr	r0, [pc, #304]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001bba:	f7ff fd2f 	bl	800161c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	2106      	movs	r1, #6
 8001bc2:	484a      	ldr	r0, [pc, #296]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001bc4:	f7ff fd4e 	bl	8001664 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2106      	movs	r1, #6
 8001bcc:	4847      	ldr	r0, [pc, #284]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001bce:	f7ff fd6d 	bl	80016ac <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2106      	movs	r1, #6
 8001bd6:	4845      	ldr	r0, [pc, #276]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001bd8:	f7ff fd8c 	bl	80016f4 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4844      	ldr	r0, [pc, #272]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001be0:	f7ff ff80 	bl	8001ae4 <LL_USART_DMA_GetRegAddr>
 8001be4:	4604      	mov	r4, r0
 8001be6:	4d43      	ldr	r5, [pc, #268]	; (8001cf4 <MX_USART2_UART_Init+0x1c0>)
 8001be8:	2106      	movs	r1, #6
 8001bea:	4840      	ldr	r0, [pc, #256]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001bec:	f7ff fcda 	bl	80015a4 <LL_DMA_GetDataTransferDirection>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	2106      	movs	r1, #6
 8001bfa:	483c      	ldr	r0, [pc, #240]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001bfc:	f7ff fdfc 	bl	80017f8 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c04:	2106      	movs	r1, #6
 8001c06:	4839      	ldr	r0, [pc, #228]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c08:	f7ff fdbc 	bl	8001784 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001c0c:	2106      	movs	r1, #6
 8001c0e:	4837      	ldr	r0, [pc, #220]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c10:	f7ff fc62 	bl	80014d8 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001c14:	4836      	ldr	r0, [pc, #216]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001c16:	f7ff ff45 	bl	8001aa4 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	4833      	ldr	r0, [pc, #204]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c1e:	f7ff fe6b 	bl	80018f8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8001c22:	2106      	movs	r1, #6
 8001c24:	4831      	ldr	r0, [pc, #196]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c26:	f7ff fe87 	bl	8001938 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	2107      	movs	r1, #7
 8001c2e:	482f      	ldr	r0, [pc, #188]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c30:	f7ff fc92 	bl	8001558 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c38:	2107      	movs	r1, #7
 8001c3a:	482c      	ldr	r0, [pc, #176]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c3c:	f7ff fd7e 	bl	800173c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2107      	movs	r1, #7
 8001c44:	4829      	ldr	r0, [pc, #164]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c46:	f7ff fcc5 	bl	80015d4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2107      	movs	r1, #7
 8001c4e:	4827      	ldr	r0, [pc, #156]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c50:	f7ff fce4 	bl	800161c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	2107      	movs	r1, #7
 8001c58:	4824      	ldr	r0, [pc, #144]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c5a:	f7ff fd03 	bl	8001664 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2107      	movs	r1, #7
 8001c62:	4822      	ldr	r0, [pc, #136]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c64:	f7ff fd22 	bl	80016ac <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	481f      	ldr	r0, [pc, #124]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c6e:	f7ff fd41 	bl	80016f4 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001c72:	2100      	movs	r1, #0
 8001c74:	481e      	ldr	r0, [pc, #120]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001c76:	f7ff ff35 	bl	8001ae4 <LL_USART_DMA_GetRegAddr>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2107      	movs	r1, #7
 8001c80:	481a      	ldr	r0, [pc, #104]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c82:	f7ff fe0d 	bl	80018a0 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001c86:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001c88:	f7ff ff1c 	bl	8001ac4 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001c8c:	2107      	movs	r1, #7
 8001c8e:	4817      	ldr	r0, [pc, #92]	; (8001cec <MX_USART2_UART_Init+0x1b8>)
 8001c90:	f7ff fe72 	bl	8001978 <LL_DMA_EnableIT_TE>
  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001c94:	2100      	movs	r1, #0
 8001c96:	2026      	movs	r0, #38	; 0x26
 8001c98:	f7ff fbf4 	bl	8001484 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001c9c:	2026      	movs	r0, #38	; 0x26
 8001c9e:	f7ff fbd7 	bl	8001450 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001ca2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ca6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001cc8:	f7fe fe5c 	bl	8000984 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001ccc:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001cce:	f7ff feb3 	bl	8001a38 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001cd4:	f7ff fed6 	bl	8001a84 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001cda:	f7ff fec3 	bl	8001a64 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_USART2_UART_Init+0x1bc>)
 8001ce0:	f7ff fe9a 	bl	8001a18 <LL_USART_Enable>
  	  //type your code here:
}
 8001ce4:	bf00      	nop
 8001ce6:	3738      	adds	r7, #56	; 0x38
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bdb0      	pop	{r4, r5, r7, pc}
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	200002a8 	.word	0x200002a8

08001cf8 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	461a      	mov	r2, r3
 8001d08:	2107      	movs	r1, #7
 8001d0a:	480a      	ldr	r0, [pc, #40]	; (8001d34 <USART2_PutBuffer+0x3c>)
 8001d0c:	f7ff fdb0 	bl	8001870 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	461a      	mov	r2, r3
 8001d14:	2107      	movs	r1, #7
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <USART2_PutBuffer+0x3c>)
 8001d18:	f7ff fd34 	bl	8001784 <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001d1c:	2107      	movs	r1, #7
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <USART2_PutBuffer+0x3c>)
 8001d20:	f7ff fdea 	bl	80018f8 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001d24:	2107      	movs	r1, #7
 8001d26:	4803      	ldr	r0, [pc, #12]	; (8001d34 <USART2_PutBuffer+0x3c>)
 8001d28:	f7ff fbd6 	bl	80014d8 <LL_DMA_EnableChannel>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40020000 	.word	0x40020000

08001d38 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <USART2_CheckDmaReception+0x74>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d02d      	beq.n	8001da2 <USART2_CheckDmaReception+0x6a>
    new = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001d46:	2106      	movs	r1, #6
 8001d48:	4819      	ldr	r0, [pc, #100]	; (8001db0 <USART2_CheckDmaReception+0x78>)
 8001d4a:	f7ff fd3f 	bl	80017cc <LL_DMA_GetDataLength>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <USART2_CheckDmaReception+0x7c>)
 8001d58:	601a      	str	r2, [r3, #0]

	for(int i = old ; i < new ; i++){
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <USART2_CheckDmaReception+0x80>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	e00a      	b.n	8001d78 <USART2_CheckDmaReception+0x40>
		USART2_ProcessData(bufferUSART2dma[i]);
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <USART2_CheckDmaReception+0x74>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4915      	ldr	r1, [pc, #84]	; (8001dbc <USART2_CheckDmaReception+0x84>)
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	440a      	add	r2, r1
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4798      	blx	r3
	for(int i = old ; i < new ; i++){
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3301      	adds	r3, #1
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <USART2_CheckDmaReception+0x7c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dbef      	blt.n	8001d62 <USART2_CheckDmaReception+0x2a>
	}
	old = new;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <USART2_CheckDmaReception+0x7c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <USART2_CheckDmaReception+0x80>)
 8001d88:	6013      	str	r3, [r2, #0]
	if(LL_DMA_IsActiveFlag_TC6(DMA1)){
 8001d8a:	4809      	ldr	r0, [pc, #36]	; (8001db0 <USART2_CheckDmaReception+0x78>)
 8001d8c:	f7ff fda0 	bl	80018d0 <LL_DMA_IsActiveFlag_TC6>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <USART2_CheckDmaReception+0x6c>
		DMA_channel_reset();
 8001d96:	f000 f813 	bl	8001dc0 <DMA_channel_reset>
		old = 0;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <USART2_CheckDmaReception+0x80>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e000      	b.n	8001da4 <USART2_CheckDmaReception+0x6c>
	if(USART2_ProcessData == 0) return;
 8001da2:	bf00      	nop
	 }
}
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000008c 	.word	0x2000008c
 8001db0:	40020000 	.word	0x40020000
 8001db4:	20000094 	.word	0x20000094
 8001db8:	20000090 	.word	0x20000090
 8001dbc:	200002a8 	.word	0x200002a8

08001dc0 <DMA_channel_reset>:

void DMA_channel_reset()
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af02      	add	r7, sp, #8
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001dc6:	2106      	movs	r1, #6
 8001dc8:	4810      	ldr	r0, [pc, #64]	; (8001e0c <DMA_channel_reset+0x4c>)
 8001dca:	f7ff fba5 	bl	8001518 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001dce:	2101      	movs	r1, #1
 8001dd0:	480f      	ldr	r0, [pc, #60]	; (8001e10 <DMA_channel_reset+0x50>)
 8001dd2:	f7ff fe87 	bl	8001ae4 <LL_USART_DMA_GetRegAddr>
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4d0e      	ldr	r5, [pc, #56]	; (8001e14 <DMA_channel_reset+0x54>)
 8001dda:	2106      	movs	r1, #6
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <DMA_channel_reset+0x4c>)
 8001dde:	f7ff fbe1 	bl	80015a4 <LL_DMA_GetDataTransferDirection>
 8001de2:	4603      	mov	r3, r0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	462b      	mov	r3, r5
 8001de8:	4622      	mov	r2, r4
 8001dea:	2106      	movs	r1, #6
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <DMA_channel_reset+0x4c>)
 8001dee:	f7ff fd03 	bl	80017f8 <LL_DMA_ConfigAddresses>
	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),(uint32_t)bufferUSART2dma,LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df6:	2106      	movs	r1, #6
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <DMA_channel_reset+0x4c>)
 8001dfa:	f7ff fcc3 	bl	8001784 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001dfe:	2106      	movs	r1, #6
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA_channel_reset+0x4c>)
 8001e02:	f7ff fb69 	bl	80014d8 <LL_DMA_EnableChannel>
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40004400 	.word	0x40004400
 8001e14:	200002a8 	.word	0x200002a8

08001e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e1e:	e003      	b.n	8001e28 <LoopCopyDataInit>

08001e20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e26:	3104      	adds	r1, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e30:	d3f6      	bcc.n	8001e20 <CopyDataInit>
	ldr	r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e34:	e002      	b.n	8001e3c <LoopFillZerobss>

08001e36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e38:	f842 3b04 	str.w	r3, [r2], #4

08001e3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <LoopForever+0x16>)
	cmp	r2, r3
 8001e3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e40:	d3f9      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e42:	f7ff fabb 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f000 f817 	bl	8001e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4a:	f7ff f867 	bl	8000f1c <main>

08001e4e <LoopForever>:

LoopForever:
    b LoopForever
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e50:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001e54:	080027bc 	.word	0x080027bc
	ldr	r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e5c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001e60:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001e64:	200003b8 	.word	0x200003b8

08001e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC1_2_IRQHandler>
	...

08001e6c <__errno>:
 8001e6c:	4b01      	ldr	r3, [pc, #4]	; (8001e74 <__errno+0x8>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000004 	.word	0x20000004

08001e78 <__libc_init_array>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4d0d      	ldr	r5, [pc, #52]	; (8001eb0 <__libc_init_array+0x38>)
 8001e7c:	4c0d      	ldr	r4, [pc, #52]	; (8001eb4 <__libc_init_array+0x3c>)
 8001e7e:	1b64      	subs	r4, r4, r5
 8001e80:	10a4      	asrs	r4, r4, #2
 8001e82:	2600      	movs	r6, #0
 8001e84:	42a6      	cmp	r6, r4
 8001e86:	d109      	bne.n	8001e9c <__libc_init_array+0x24>
 8001e88:	4d0b      	ldr	r5, [pc, #44]	; (8001eb8 <__libc_init_array+0x40>)
 8001e8a:	4c0c      	ldr	r4, [pc, #48]	; (8001ebc <__libc_init_array+0x44>)
 8001e8c:	f000 fc46 	bl	800271c <_init>
 8001e90:	1b64      	subs	r4, r4, r5
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	2600      	movs	r6, #0
 8001e96:	42a6      	cmp	r6, r4
 8001e98:	d105      	bne.n	8001ea6 <__libc_init_array+0x2e>
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea0:	4798      	blx	r3
 8001ea2:	3601      	adds	r6, #1
 8001ea4:	e7ee      	b.n	8001e84 <__libc_init_array+0xc>
 8001ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eaa:	4798      	blx	r3
 8001eac:	3601      	adds	r6, #1
 8001eae:	e7f2      	b.n	8001e96 <__libc_init_array+0x1e>
 8001eb0:	080027b4 	.word	0x080027b4
 8001eb4:	080027b4 	.word	0x080027b4
 8001eb8:	080027b4 	.word	0x080027b4
 8001ebc:	080027b8 	.word	0x080027b8

08001ec0 <siprintf>:
 8001ec0:	b40e      	push	{r1, r2, r3}
 8001ec2:	b500      	push	{lr}
 8001ec4:	b09c      	sub	sp, #112	; 0x70
 8001ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8001ec8:	9002      	str	r0, [sp, #8]
 8001eca:	9006      	str	r0, [sp, #24]
 8001ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ed0:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <siprintf+0x38>)
 8001ed2:	9107      	str	r1, [sp, #28]
 8001ed4:	9104      	str	r1, [sp, #16]
 8001ed6:	4909      	ldr	r1, [pc, #36]	; (8001efc <siprintf+0x3c>)
 8001ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8001edc:	9105      	str	r1, [sp, #20]
 8001ede:	6800      	ldr	r0, [r0, #0]
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	a902      	add	r1, sp, #8
 8001ee4:	f000 f868 	bl	8001fb8 <_svfiprintf_r>
 8001ee8:	9b02      	ldr	r3, [sp, #8]
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	b01c      	add	sp, #112	; 0x70
 8001ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ef4:	b003      	add	sp, #12
 8001ef6:	4770      	bx	lr
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	ffff0208 	.word	0xffff0208

08001f00 <__ssputs_r>:
 8001f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f04:	688e      	ldr	r6, [r1, #8]
 8001f06:	429e      	cmp	r6, r3
 8001f08:	4682      	mov	sl, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4690      	mov	r8, r2
 8001f0e:	461f      	mov	r7, r3
 8001f10:	d838      	bhi.n	8001f84 <__ssputs_r+0x84>
 8001f12:	898a      	ldrh	r2, [r1, #12]
 8001f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f18:	d032      	beq.n	8001f80 <__ssputs_r+0x80>
 8001f1a:	6825      	ldr	r5, [r4, #0]
 8001f1c:	6909      	ldr	r1, [r1, #16]
 8001f1e:	eba5 0901 	sub.w	r9, r5, r1
 8001f22:	6965      	ldr	r5, [r4, #20]
 8001f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	444b      	add	r3, r9
 8001f30:	106d      	asrs	r5, r5, #1
 8001f32:	429d      	cmp	r5, r3
 8001f34:	bf38      	it	cc
 8001f36:	461d      	movcc	r5, r3
 8001f38:	0553      	lsls	r3, r2, #21
 8001f3a:	d531      	bpl.n	8001fa0 <__ssputs_r+0xa0>
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f000 fb47 	bl	80025d0 <_malloc_r>
 8001f42:	4606      	mov	r6, r0
 8001f44:	b950      	cbnz	r0, 8001f5c <__ssputs_r+0x5c>
 8001f46:	230c      	movs	r3, #12
 8001f48:	f8ca 3000 	str.w	r3, [sl]
 8001f4c:	89a3      	ldrh	r3, [r4, #12]
 8001f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f52:	81a3      	strh	r3, [r4, #12]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5c:	6921      	ldr	r1, [r4, #16]
 8001f5e:	464a      	mov	r2, r9
 8001f60:	f000 fabe 	bl	80024e0 <memcpy>
 8001f64:	89a3      	ldrh	r3, [r4, #12]
 8001f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6e:	81a3      	strh	r3, [r4, #12]
 8001f70:	6126      	str	r6, [r4, #16]
 8001f72:	6165      	str	r5, [r4, #20]
 8001f74:	444e      	add	r6, r9
 8001f76:	eba5 0509 	sub.w	r5, r5, r9
 8001f7a:	6026      	str	r6, [r4, #0]
 8001f7c:	60a5      	str	r5, [r4, #8]
 8001f7e:	463e      	mov	r6, r7
 8001f80:	42be      	cmp	r6, r7
 8001f82:	d900      	bls.n	8001f86 <__ssputs_r+0x86>
 8001f84:	463e      	mov	r6, r7
 8001f86:	4632      	mov	r2, r6
 8001f88:	6820      	ldr	r0, [r4, #0]
 8001f8a:	4641      	mov	r1, r8
 8001f8c:	f000 fab6 	bl	80024fc <memmove>
 8001f90:	68a3      	ldr	r3, [r4, #8]
 8001f92:	6822      	ldr	r2, [r4, #0]
 8001f94:	1b9b      	subs	r3, r3, r6
 8001f96:	4432      	add	r2, r6
 8001f98:	60a3      	str	r3, [r4, #8]
 8001f9a:	6022      	str	r2, [r4, #0]
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	e7db      	b.n	8001f58 <__ssputs_r+0x58>
 8001fa0:	462a      	mov	r2, r5
 8001fa2:	f000 fb6f 	bl	8002684 <_realloc_r>
 8001fa6:	4606      	mov	r6, r0
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d1e1      	bne.n	8001f70 <__ssputs_r+0x70>
 8001fac:	6921      	ldr	r1, [r4, #16]
 8001fae:	4650      	mov	r0, sl
 8001fb0:	f000 fabe 	bl	8002530 <_free_r>
 8001fb4:	e7c7      	b.n	8001f46 <__ssputs_r+0x46>
	...

08001fb8 <_svfiprintf_r>:
 8001fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fbc:	4698      	mov	r8, r3
 8001fbe:	898b      	ldrh	r3, [r1, #12]
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	b09d      	sub	sp, #116	; 0x74
 8001fc4:	4607      	mov	r7, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4614      	mov	r4, r2
 8001fca:	d50e      	bpl.n	8001fea <_svfiprintf_r+0x32>
 8001fcc:	690b      	ldr	r3, [r1, #16]
 8001fce:	b963      	cbnz	r3, 8001fea <_svfiprintf_r+0x32>
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	f000 fafd 	bl	80025d0 <_malloc_r>
 8001fd6:	6028      	str	r0, [r5, #0]
 8001fd8:	6128      	str	r0, [r5, #16]
 8001fda:	b920      	cbnz	r0, 8001fe6 <_svfiprintf_r+0x2e>
 8001fdc:	230c      	movs	r3, #12
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	e0d1      	b.n	800218a <_svfiprintf_r+0x1d2>
 8001fe6:	2340      	movs	r3, #64	; 0x40
 8001fe8:	616b      	str	r3, [r5, #20]
 8001fea:	2300      	movs	r3, #0
 8001fec:	9309      	str	r3, [sp, #36]	; 0x24
 8001fee:	2320      	movs	r3, #32
 8001ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ff8:	2330      	movs	r3, #48	; 0x30
 8001ffa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80021a4 <_svfiprintf_r+0x1ec>
 8001ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002002:	f04f 0901 	mov.w	r9, #1
 8002006:	4623      	mov	r3, r4
 8002008:	469a      	mov	sl, r3
 800200a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800200e:	b10a      	cbz	r2, 8002014 <_svfiprintf_r+0x5c>
 8002010:	2a25      	cmp	r2, #37	; 0x25
 8002012:	d1f9      	bne.n	8002008 <_svfiprintf_r+0x50>
 8002014:	ebba 0b04 	subs.w	fp, sl, r4
 8002018:	d00b      	beq.n	8002032 <_svfiprintf_r+0x7a>
 800201a:	465b      	mov	r3, fp
 800201c:	4622      	mov	r2, r4
 800201e:	4629      	mov	r1, r5
 8002020:	4638      	mov	r0, r7
 8002022:	f7ff ff6d 	bl	8001f00 <__ssputs_r>
 8002026:	3001      	adds	r0, #1
 8002028:	f000 80aa 	beq.w	8002180 <_svfiprintf_r+0x1c8>
 800202c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800202e:	445a      	add	r2, fp
 8002030:	9209      	str	r2, [sp, #36]	; 0x24
 8002032:	f89a 3000 	ldrb.w	r3, [sl]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80a2 	beq.w	8002180 <_svfiprintf_r+0x1c8>
 800203c:	2300      	movs	r3, #0
 800203e:	f04f 32ff 	mov.w	r2, #4294967295
 8002042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002046:	f10a 0a01 	add.w	sl, sl, #1
 800204a:	9304      	str	r3, [sp, #16]
 800204c:	9307      	str	r3, [sp, #28]
 800204e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002052:	931a      	str	r3, [sp, #104]	; 0x68
 8002054:	4654      	mov	r4, sl
 8002056:	2205      	movs	r2, #5
 8002058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800205c:	4851      	ldr	r0, [pc, #324]	; (80021a4 <_svfiprintf_r+0x1ec>)
 800205e:	f7fe f8b7 	bl	80001d0 <memchr>
 8002062:	9a04      	ldr	r2, [sp, #16]
 8002064:	b9d8      	cbnz	r0, 800209e <_svfiprintf_r+0xe6>
 8002066:	06d0      	lsls	r0, r2, #27
 8002068:	bf44      	itt	mi
 800206a:	2320      	movmi	r3, #32
 800206c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002070:	0711      	lsls	r1, r2, #28
 8002072:	bf44      	itt	mi
 8002074:	232b      	movmi	r3, #43	; 0x2b
 8002076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800207a:	f89a 3000 	ldrb.w	r3, [sl]
 800207e:	2b2a      	cmp	r3, #42	; 0x2a
 8002080:	d015      	beq.n	80020ae <_svfiprintf_r+0xf6>
 8002082:	9a07      	ldr	r2, [sp, #28]
 8002084:	4654      	mov	r4, sl
 8002086:	2000      	movs	r0, #0
 8002088:	f04f 0c0a 	mov.w	ip, #10
 800208c:	4621      	mov	r1, r4
 800208e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002092:	3b30      	subs	r3, #48	; 0x30
 8002094:	2b09      	cmp	r3, #9
 8002096:	d94e      	bls.n	8002136 <_svfiprintf_r+0x17e>
 8002098:	b1b0      	cbz	r0, 80020c8 <_svfiprintf_r+0x110>
 800209a:	9207      	str	r2, [sp, #28]
 800209c:	e014      	b.n	80020c8 <_svfiprintf_r+0x110>
 800209e:	eba0 0308 	sub.w	r3, r0, r8
 80020a2:	fa09 f303 	lsl.w	r3, r9, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	9304      	str	r3, [sp, #16]
 80020aa:	46a2      	mov	sl, r4
 80020ac:	e7d2      	b.n	8002054 <_svfiprintf_r+0x9c>
 80020ae:	9b03      	ldr	r3, [sp, #12]
 80020b0:	1d19      	adds	r1, r3, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	9103      	str	r1, [sp, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bfbb      	ittet	lt
 80020ba:	425b      	neglt	r3, r3
 80020bc:	f042 0202 	orrlt.w	r2, r2, #2
 80020c0:	9307      	strge	r3, [sp, #28]
 80020c2:	9307      	strlt	r3, [sp, #28]
 80020c4:	bfb8      	it	lt
 80020c6:	9204      	strlt	r2, [sp, #16]
 80020c8:	7823      	ldrb	r3, [r4, #0]
 80020ca:	2b2e      	cmp	r3, #46	; 0x2e
 80020cc:	d10c      	bne.n	80020e8 <_svfiprintf_r+0x130>
 80020ce:	7863      	ldrb	r3, [r4, #1]
 80020d0:	2b2a      	cmp	r3, #42	; 0x2a
 80020d2:	d135      	bne.n	8002140 <_svfiprintf_r+0x188>
 80020d4:	9b03      	ldr	r3, [sp, #12]
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	9203      	str	r2, [sp, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bfb8      	it	lt
 80020e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80020e4:	3402      	adds	r4, #2
 80020e6:	9305      	str	r3, [sp, #20]
 80020e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80021b4 <_svfiprintf_r+0x1fc>
 80020ec:	7821      	ldrb	r1, [r4, #0]
 80020ee:	2203      	movs	r2, #3
 80020f0:	4650      	mov	r0, sl
 80020f2:	f7fe f86d 	bl	80001d0 <memchr>
 80020f6:	b140      	cbz	r0, 800210a <_svfiprintf_r+0x152>
 80020f8:	2340      	movs	r3, #64	; 0x40
 80020fa:	eba0 000a 	sub.w	r0, r0, sl
 80020fe:	fa03 f000 	lsl.w	r0, r3, r0
 8002102:	9b04      	ldr	r3, [sp, #16]
 8002104:	4303      	orrs	r3, r0
 8002106:	3401      	adds	r4, #1
 8002108:	9304      	str	r3, [sp, #16]
 800210a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800210e:	4826      	ldr	r0, [pc, #152]	; (80021a8 <_svfiprintf_r+0x1f0>)
 8002110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002114:	2206      	movs	r2, #6
 8002116:	f7fe f85b 	bl	80001d0 <memchr>
 800211a:	2800      	cmp	r0, #0
 800211c:	d038      	beq.n	8002190 <_svfiprintf_r+0x1d8>
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <_svfiprintf_r+0x1f4>)
 8002120:	bb1b      	cbnz	r3, 800216a <_svfiprintf_r+0x1b2>
 8002122:	9b03      	ldr	r3, [sp, #12]
 8002124:	3307      	adds	r3, #7
 8002126:	f023 0307 	bic.w	r3, r3, #7
 800212a:	3308      	adds	r3, #8
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002130:	4433      	add	r3, r6
 8002132:	9309      	str	r3, [sp, #36]	; 0x24
 8002134:	e767      	b.n	8002006 <_svfiprintf_r+0x4e>
 8002136:	fb0c 3202 	mla	r2, ip, r2, r3
 800213a:	460c      	mov	r4, r1
 800213c:	2001      	movs	r0, #1
 800213e:	e7a5      	b.n	800208c <_svfiprintf_r+0xd4>
 8002140:	2300      	movs	r3, #0
 8002142:	3401      	adds	r4, #1
 8002144:	9305      	str	r3, [sp, #20]
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 0c0a 	mov.w	ip, #10
 800214c:	4620      	mov	r0, r4
 800214e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002152:	3a30      	subs	r2, #48	; 0x30
 8002154:	2a09      	cmp	r2, #9
 8002156:	d903      	bls.n	8002160 <_svfiprintf_r+0x1a8>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0c5      	beq.n	80020e8 <_svfiprintf_r+0x130>
 800215c:	9105      	str	r1, [sp, #20]
 800215e:	e7c3      	b.n	80020e8 <_svfiprintf_r+0x130>
 8002160:	fb0c 2101 	mla	r1, ip, r1, r2
 8002164:	4604      	mov	r4, r0
 8002166:	2301      	movs	r3, #1
 8002168:	e7f0      	b.n	800214c <_svfiprintf_r+0x194>
 800216a:	ab03      	add	r3, sp, #12
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	462a      	mov	r2, r5
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <_svfiprintf_r+0x1f8>)
 8002172:	a904      	add	r1, sp, #16
 8002174:	4638      	mov	r0, r7
 8002176:	f3af 8000 	nop.w
 800217a:	1c42      	adds	r2, r0, #1
 800217c:	4606      	mov	r6, r0
 800217e:	d1d6      	bne.n	800212e <_svfiprintf_r+0x176>
 8002180:	89ab      	ldrh	r3, [r5, #12]
 8002182:	065b      	lsls	r3, r3, #25
 8002184:	f53f af2c 	bmi.w	8001fe0 <_svfiprintf_r+0x28>
 8002188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800218a:	b01d      	add	sp, #116	; 0x74
 800218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002190:	ab03      	add	r3, sp, #12
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	462a      	mov	r2, r5
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <_svfiprintf_r+0x1f8>)
 8002198:	a904      	add	r1, sp, #16
 800219a:	4638      	mov	r0, r7
 800219c:	f000 f87a 	bl	8002294 <_printf_i>
 80021a0:	e7eb      	b.n	800217a <_svfiprintf_r+0x1c2>
 80021a2:	bf00      	nop
 80021a4:	0800277f 	.word	0x0800277f
 80021a8:	08002789 	.word	0x08002789
 80021ac:	00000000 	.word	0x00000000
 80021b0:	08001f01 	.word	0x08001f01
 80021b4:	08002785 	.word	0x08002785

080021b8 <_printf_common>:
 80021b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021bc:	4616      	mov	r6, r2
 80021be:	4699      	mov	r9, r3
 80021c0:	688a      	ldr	r2, [r1, #8]
 80021c2:	690b      	ldr	r3, [r1, #16]
 80021c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bfb8      	it	lt
 80021cc:	4613      	movlt	r3, r2
 80021ce:	6033      	str	r3, [r6, #0]
 80021d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021d4:	4607      	mov	r7, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	b10a      	cbz	r2, 80021de <_printf_common+0x26>
 80021da:	3301      	adds	r3, #1
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	0699      	lsls	r1, r3, #26
 80021e2:	bf42      	ittt	mi
 80021e4:	6833      	ldrmi	r3, [r6, #0]
 80021e6:	3302      	addmi	r3, #2
 80021e8:	6033      	strmi	r3, [r6, #0]
 80021ea:	6825      	ldr	r5, [r4, #0]
 80021ec:	f015 0506 	ands.w	r5, r5, #6
 80021f0:	d106      	bne.n	8002200 <_printf_common+0x48>
 80021f2:	f104 0a19 	add.w	sl, r4, #25
 80021f6:	68e3      	ldr	r3, [r4, #12]
 80021f8:	6832      	ldr	r2, [r6, #0]
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	42ab      	cmp	r3, r5
 80021fe:	dc26      	bgt.n	800224e <_printf_common+0x96>
 8002200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002204:	1e13      	subs	r3, r2, #0
 8002206:	6822      	ldr	r2, [r4, #0]
 8002208:	bf18      	it	ne
 800220a:	2301      	movne	r3, #1
 800220c:	0692      	lsls	r2, r2, #26
 800220e:	d42b      	bmi.n	8002268 <_printf_common+0xb0>
 8002210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002214:	4649      	mov	r1, r9
 8002216:	4638      	mov	r0, r7
 8002218:	47c0      	blx	r8
 800221a:	3001      	adds	r0, #1
 800221c:	d01e      	beq.n	800225c <_printf_common+0xa4>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	68e5      	ldr	r5, [r4, #12]
 8002222:	6832      	ldr	r2, [r6, #0]
 8002224:	f003 0306 	and.w	r3, r3, #6
 8002228:	2b04      	cmp	r3, #4
 800222a:	bf08      	it	eq
 800222c:	1aad      	subeq	r5, r5, r2
 800222e:	68a3      	ldr	r3, [r4, #8]
 8002230:	6922      	ldr	r2, [r4, #16]
 8002232:	bf0c      	ite	eq
 8002234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002238:	2500      	movne	r5, #0
 800223a:	4293      	cmp	r3, r2
 800223c:	bfc4      	itt	gt
 800223e:	1a9b      	subgt	r3, r3, r2
 8002240:	18ed      	addgt	r5, r5, r3
 8002242:	2600      	movs	r6, #0
 8002244:	341a      	adds	r4, #26
 8002246:	42b5      	cmp	r5, r6
 8002248:	d11a      	bne.n	8002280 <_printf_common+0xc8>
 800224a:	2000      	movs	r0, #0
 800224c:	e008      	b.n	8002260 <_printf_common+0xa8>
 800224e:	2301      	movs	r3, #1
 8002250:	4652      	mov	r2, sl
 8002252:	4649      	mov	r1, r9
 8002254:	4638      	mov	r0, r7
 8002256:	47c0      	blx	r8
 8002258:	3001      	adds	r0, #1
 800225a:	d103      	bne.n	8002264 <_printf_common+0xac>
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002264:	3501      	adds	r5, #1
 8002266:	e7c6      	b.n	80021f6 <_printf_common+0x3e>
 8002268:	18e1      	adds	r1, r4, r3
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	2030      	movs	r0, #48	; 0x30
 800226e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002272:	4422      	add	r2, r4
 8002274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800227c:	3302      	adds	r3, #2
 800227e:	e7c7      	b.n	8002210 <_printf_common+0x58>
 8002280:	2301      	movs	r3, #1
 8002282:	4622      	mov	r2, r4
 8002284:	4649      	mov	r1, r9
 8002286:	4638      	mov	r0, r7
 8002288:	47c0      	blx	r8
 800228a:	3001      	adds	r0, #1
 800228c:	d0e6      	beq.n	800225c <_printf_common+0xa4>
 800228e:	3601      	adds	r6, #1
 8002290:	e7d9      	b.n	8002246 <_printf_common+0x8e>
	...

08002294 <_printf_i>:
 8002294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002298:	460c      	mov	r4, r1
 800229a:	4691      	mov	r9, r2
 800229c:	7e27      	ldrb	r7, [r4, #24]
 800229e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80022a0:	2f78      	cmp	r7, #120	; 0x78
 80022a2:	4680      	mov	r8, r0
 80022a4:	469a      	mov	sl, r3
 80022a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022aa:	d807      	bhi.n	80022bc <_printf_i+0x28>
 80022ac:	2f62      	cmp	r7, #98	; 0x62
 80022ae:	d80a      	bhi.n	80022c6 <_printf_i+0x32>
 80022b0:	2f00      	cmp	r7, #0
 80022b2:	f000 80d8 	beq.w	8002466 <_printf_i+0x1d2>
 80022b6:	2f58      	cmp	r7, #88	; 0x58
 80022b8:	f000 80a3 	beq.w	8002402 <_printf_i+0x16e>
 80022bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80022c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022c4:	e03a      	b.n	800233c <_printf_i+0xa8>
 80022c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022ca:	2b15      	cmp	r3, #21
 80022cc:	d8f6      	bhi.n	80022bc <_printf_i+0x28>
 80022ce:	a001      	add	r0, pc, #4	; (adr r0, 80022d4 <_printf_i+0x40>)
 80022d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80022d4:	0800232d 	.word	0x0800232d
 80022d8:	08002341 	.word	0x08002341
 80022dc:	080022bd 	.word	0x080022bd
 80022e0:	080022bd 	.word	0x080022bd
 80022e4:	080022bd 	.word	0x080022bd
 80022e8:	080022bd 	.word	0x080022bd
 80022ec:	08002341 	.word	0x08002341
 80022f0:	080022bd 	.word	0x080022bd
 80022f4:	080022bd 	.word	0x080022bd
 80022f8:	080022bd 	.word	0x080022bd
 80022fc:	080022bd 	.word	0x080022bd
 8002300:	0800244d 	.word	0x0800244d
 8002304:	08002371 	.word	0x08002371
 8002308:	0800242f 	.word	0x0800242f
 800230c:	080022bd 	.word	0x080022bd
 8002310:	080022bd 	.word	0x080022bd
 8002314:	0800246f 	.word	0x0800246f
 8002318:	080022bd 	.word	0x080022bd
 800231c:	08002371 	.word	0x08002371
 8002320:	080022bd 	.word	0x080022bd
 8002324:	080022bd 	.word	0x080022bd
 8002328:	08002437 	.word	0x08002437
 800232c:	680b      	ldr	r3, [r1, #0]
 800232e:	1d1a      	adds	r2, r3, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	600a      	str	r2, [r1, #0]
 8002334:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800233c:	2301      	movs	r3, #1
 800233e:	e0a3      	b.n	8002488 <_printf_i+0x1f4>
 8002340:	6825      	ldr	r5, [r4, #0]
 8002342:	6808      	ldr	r0, [r1, #0]
 8002344:	062e      	lsls	r6, r5, #24
 8002346:	f100 0304 	add.w	r3, r0, #4
 800234a:	d50a      	bpl.n	8002362 <_printf_i+0xce>
 800234c:	6805      	ldr	r5, [r0, #0]
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	2d00      	cmp	r5, #0
 8002352:	da03      	bge.n	800235c <_printf_i+0xc8>
 8002354:	232d      	movs	r3, #45	; 0x2d
 8002356:	426d      	negs	r5, r5
 8002358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800235c:	485e      	ldr	r0, [pc, #376]	; (80024d8 <_printf_i+0x244>)
 800235e:	230a      	movs	r3, #10
 8002360:	e019      	b.n	8002396 <_printf_i+0x102>
 8002362:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002366:	6805      	ldr	r5, [r0, #0]
 8002368:	600b      	str	r3, [r1, #0]
 800236a:	bf18      	it	ne
 800236c:	b22d      	sxthne	r5, r5
 800236e:	e7ef      	b.n	8002350 <_printf_i+0xbc>
 8002370:	680b      	ldr	r3, [r1, #0]
 8002372:	6825      	ldr	r5, [r4, #0]
 8002374:	1d18      	adds	r0, r3, #4
 8002376:	6008      	str	r0, [r1, #0]
 8002378:	0628      	lsls	r0, r5, #24
 800237a:	d501      	bpl.n	8002380 <_printf_i+0xec>
 800237c:	681d      	ldr	r5, [r3, #0]
 800237e:	e002      	b.n	8002386 <_printf_i+0xf2>
 8002380:	0669      	lsls	r1, r5, #25
 8002382:	d5fb      	bpl.n	800237c <_printf_i+0xe8>
 8002384:	881d      	ldrh	r5, [r3, #0]
 8002386:	4854      	ldr	r0, [pc, #336]	; (80024d8 <_printf_i+0x244>)
 8002388:	2f6f      	cmp	r7, #111	; 0x6f
 800238a:	bf0c      	ite	eq
 800238c:	2308      	moveq	r3, #8
 800238e:	230a      	movne	r3, #10
 8002390:	2100      	movs	r1, #0
 8002392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002396:	6866      	ldr	r6, [r4, #4]
 8002398:	60a6      	str	r6, [r4, #8]
 800239a:	2e00      	cmp	r6, #0
 800239c:	bfa2      	ittt	ge
 800239e:	6821      	ldrge	r1, [r4, #0]
 80023a0:	f021 0104 	bicge.w	r1, r1, #4
 80023a4:	6021      	strge	r1, [r4, #0]
 80023a6:	b90d      	cbnz	r5, 80023ac <_printf_i+0x118>
 80023a8:	2e00      	cmp	r6, #0
 80023aa:	d04d      	beq.n	8002448 <_printf_i+0x1b4>
 80023ac:	4616      	mov	r6, r2
 80023ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80023b2:	fb03 5711 	mls	r7, r3, r1, r5
 80023b6:	5dc7      	ldrb	r7, [r0, r7]
 80023b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80023bc:	462f      	mov	r7, r5
 80023be:	42bb      	cmp	r3, r7
 80023c0:	460d      	mov	r5, r1
 80023c2:	d9f4      	bls.n	80023ae <_printf_i+0x11a>
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d10b      	bne.n	80023e0 <_printf_i+0x14c>
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	07df      	lsls	r7, r3, #31
 80023cc:	d508      	bpl.n	80023e0 <_printf_i+0x14c>
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	6861      	ldr	r1, [r4, #4]
 80023d2:	4299      	cmp	r1, r3
 80023d4:	bfde      	ittt	le
 80023d6:	2330      	movle	r3, #48	; 0x30
 80023d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80023e0:	1b92      	subs	r2, r2, r6
 80023e2:	6122      	str	r2, [r4, #16]
 80023e4:	f8cd a000 	str.w	sl, [sp]
 80023e8:	464b      	mov	r3, r9
 80023ea:	aa03      	add	r2, sp, #12
 80023ec:	4621      	mov	r1, r4
 80023ee:	4640      	mov	r0, r8
 80023f0:	f7ff fee2 	bl	80021b8 <_printf_common>
 80023f4:	3001      	adds	r0, #1
 80023f6:	d14c      	bne.n	8002492 <_printf_i+0x1fe>
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	b004      	add	sp, #16
 80023fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002402:	4835      	ldr	r0, [pc, #212]	; (80024d8 <_printf_i+0x244>)
 8002404:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	680e      	ldr	r6, [r1, #0]
 800240c:	061f      	lsls	r7, r3, #24
 800240e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002412:	600e      	str	r6, [r1, #0]
 8002414:	d514      	bpl.n	8002440 <_printf_i+0x1ac>
 8002416:	07d9      	lsls	r1, r3, #31
 8002418:	bf44      	itt	mi
 800241a:	f043 0320 	orrmi.w	r3, r3, #32
 800241e:	6023      	strmi	r3, [r4, #0]
 8002420:	b91d      	cbnz	r5, 800242a <_printf_i+0x196>
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	f023 0320 	bic.w	r3, r3, #32
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	2310      	movs	r3, #16
 800242c:	e7b0      	b.n	8002390 <_printf_i+0xfc>
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	f043 0320 	orr.w	r3, r3, #32
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	2378      	movs	r3, #120	; 0x78
 8002438:	4828      	ldr	r0, [pc, #160]	; (80024dc <_printf_i+0x248>)
 800243a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800243e:	e7e3      	b.n	8002408 <_printf_i+0x174>
 8002440:	065e      	lsls	r6, r3, #25
 8002442:	bf48      	it	mi
 8002444:	b2ad      	uxthmi	r5, r5
 8002446:	e7e6      	b.n	8002416 <_printf_i+0x182>
 8002448:	4616      	mov	r6, r2
 800244a:	e7bb      	b.n	80023c4 <_printf_i+0x130>
 800244c:	680b      	ldr	r3, [r1, #0]
 800244e:	6826      	ldr	r6, [r4, #0]
 8002450:	6960      	ldr	r0, [r4, #20]
 8002452:	1d1d      	adds	r5, r3, #4
 8002454:	600d      	str	r5, [r1, #0]
 8002456:	0635      	lsls	r5, r6, #24
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	d501      	bpl.n	8002460 <_printf_i+0x1cc>
 800245c:	6018      	str	r0, [r3, #0]
 800245e:	e002      	b.n	8002466 <_printf_i+0x1d2>
 8002460:	0671      	lsls	r1, r6, #25
 8002462:	d5fb      	bpl.n	800245c <_printf_i+0x1c8>
 8002464:	8018      	strh	r0, [r3, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	6123      	str	r3, [r4, #16]
 800246a:	4616      	mov	r6, r2
 800246c:	e7ba      	b.n	80023e4 <_printf_i+0x150>
 800246e:	680b      	ldr	r3, [r1, #0]
 8002470:	1d1a      	adds	r2, r3, #4
 8002472:	600a      	str	r2, [r1, #0]
 8002474:	681e      	ldr	r6, [r3, #0]
 8002476:	6862      	ldr	r2, [r4, #4]
 8002478:	2100      	movs	r1, #0
 800247a:	4630      	mov	r0, r6
 800247c:	f7fd fea8 	bl	80001d0 <memchr>
 8002480:	b108      	cbz	r0, 8002486 <_printf_i+0x1f2>
 8002482:	1b80      	subs	r0, r0, r6
 8002484:	6060      	str	r0, [r4, #4]
 8002486:	6863      	ldr	r3, [r4, #4]
 8002488:	6123      	str	r3, [r4, #16]
 800248a:	2300      	movs	r3, #0
 800248c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002490:	e7a8      	b.n	80023e4 <_printf_i+0x150>
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	4632      	mov	r2, r6
 8002496:	4649      	mov	r1, r9
 8002498:	4640      	mov	r0, r8
 800249a:	47d0      	blx	sl
 800249c:	3001      	adds	r0, #1
 800249e:	d0ab      	beq.n	80023f8 <_printf_i+0x164>
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	079b      	lsls	r3, r3, #30
 80024a4:	d413      	bmi.n	80024ce <_printf_i+0x23a>
 80024a6:	68e0      	ldr	r0, [r4, #12]
 80024a8:	9b03      	ldr	r3, [sp, #12]
 80024aa:	4298      	cmp	r0, r3
 80024ac:	bfb8      	it	lt
 80024ae:	4618      	movlt	r0, r3
 80024b0:	e7a4      	b.n	80023fc <_printf_i+0x168>
 80024b2:	2301      	movs	r3, #1
 80024b4:	4632      	mov	r2, r6
 80024b6:	4649      	mov	r1, r9
 80024b8:	4640      	mov	r0, r8
 80024ba:	47d0      	blx	sl
 80024bc:	3001      	adds	r0, #1
 80024be:	d09b      	beq.n	80023f8 <_printf_i+0x164>
 80024c0:	3501      	adds	r5, #1
 80024c2:	68e3      	ldr	r3, [r4, #12]
 80024c4:	9903      	ldr	r1, [sp, #12]
 80024c6:	1a5b      	subs	r3, r3, r1
 80024c8:	42ab      	cmp	r3, r5
 80024ca:	dcf2      	bgt.n	80024b2 <_printf_i+0x21e>
 80024cc:	e7eb      	b.n	80024a6 <_printf_i+0x212>
 80024ce:	2500      	movs	r5, #0
 80024d0:	f104 0619 	add.w	r6, r4, #25
 80024d4:	e7f5      	b.n	80024c2 <_printf_i+0x22e>
 80024d6:	bf00      	nop
 80024d8:	08002790 	.word	0x08002790
 80024dc:	080027a1 	.word	0x080027a1

080024e0 <memcpy>:
 80024e0:	440a      	add	r2, r1
 80024e2:	4291      	cmp	r1, r2
 80024e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80024e8:	d100      	bne.n	80024ec <memcpy+0xc>
 80024ea:	4770      	bx	lr
 80024ec:	b510      	push	{r4, lr}
 80024ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024f6:	4291      	cmp	r1, r2
 80024f8:	d1f9      	bne.n	80024ee <memcpy+0xe>
 80024fa:	bd10      	pop	{r4, pc}

080024fc <memmove>:
 80024fc:	4288      	cmp	r0, r1
 80024fe:	b510      	push	{r4, lr}
 8002500:	eb01 0402 	add.w	r4, r1, r2
 8002504:	d902      	bls.n	800250c <memmove+0x10>
 8002506:	4284      	cmp	r4, r0
 8002508:	4623      	mov	r3, r4
 800250a:	d807      	bhi.n	800251c <memmove+0x20>
 800250c:	1e43      	subs	r3, r0, #1
 800250e:	42a1      	cmp	r1, r4
 8002510:	d008      	beq.n	8002524 <memmove+0x28>
 8002512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800251a:	e7f8      	b.n	800250e <memmove+0x12>
 800251c:	4402      	add	r2, r0
 800251e:	4601      	mov	r1, r0
 8002520:	428a      	cmp	r2, r1
 8002522:	d100      	bne.n	8002526 <memmove+0x2a>
 8002524:	bd10      	pop	{r4, pc}
 8002526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800252a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800252e:	e7f7      	b.n	8002520 <memmove+0x24>

08002530 <_free_r>:
 8002530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002532:	2900      	cmp	r1, #0
 8002534:	d048      	beq.n	80025c8 <_free_r+0x98>
 8002536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800253a:	9001      	str	r0, [sp, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f1a1 0404 	sub.w	r4, r1, #4
 8002542:	bfb8      	it	lt
 8002544:	18e4      	addlt	r4, r4, r3
 8002546:	f000 f8d3 	bl	80026f0 <__malloc_lock>
 800254a:	4a20      	ldr	r2, [pc, #128]	; (80025cc <_free_r+0x9c>)
 800254c:	9801      	ldr	r0, [sp, #4]
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	4615      	mov	r5, r2
 8002552:	b933      	cbnz	r3, 8002562 <_free_r+0x32>
 8002554:	6063      	str	r3, [r4, #4]
 8002556:	6014      	str	r4, [r2, #0]
 8002558:	b003      	add	sp, #12
 800255a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800255e:	f000 b8cd 	b.w	80026fc <__malloc_unlock>
 8002562:	42a3      	cmp	r3, r4
 8002564:	d90b      	bls.n	800257e <_free_r+0x4e>
 8002566:	6821      	ldr	r1, [r4, #0]
 8002568:	1862      	adds	r2, r4, r1
 800256a:	4293      	cmp	r3, r2
 800256c:	bf04      	itt	eq
 800256e:	681a      	ldreq	r2, [r3, #0]
 8002570:	685b      	ldreq	r3, [r3, #4]
 8002572:	6063      	str	r3, [r4, #4]
 8002574:	bf04      	itt	eq
 8002576:	1852      	addeq	r2, r2, r1
 8002578:	6022      	streq	r2, [r4, #0]
 800257a:	602c      	str	r4, [r5, #0]
 800257c:	e7ec      	b.n	8002558 <_free_r+0x28>
 800257e:	461a      	mov	r2, r3
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	b10b      	cbz	r3, 8002588 <_free_r+0x58>
 8002584:	42a3      	cmp	r3, r4
 8002586:	d9fa      	bls.n	800257e <_free_r+0x4e>
 8002588:	6811      	ldr	r1, [r2, #0]
 800258a:	1855      	adds	r5, r2, r1
 800258c:	42a5      	cmp	r5, r4
 800258e:	d10b      	bne.n	80025a8 <_free_r+0x78>
 8002590:	6824      	ldr	r4, [r4, #0]
 8002592:	4421      	add	r1, r4
 8002594:	1854      	adds	r4, r2, r1
 8002596:	42a3      	cmp	r3, r4
 8002598:	6011      	str	r1, [r2, #0]
 800259a:	d1dd      	bne.n	8002558 <_free_r+0x28>
 800259c:	681c      	ldr	r4, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	6053      	str	r3, [r2, #4]
 80025a2:	4421      	add	r1, r4
 80025a4:	6011      	str	r1, [r2, #0]
 80025a6:	e7d7      	b.n	8002558 <_free_r+0x28>
 80025a8:	d902      	bls.n	80025b0 <_free_r+0x80>
 80025aa:	230c      	movs	r3, #12
 80025ac:	6003      	str	r3, [r0, #0]
 80025ae:	e7d3      	b.n	8002558 <_free_r+0x28>
 80025b0:	6825      	ldr	r5, [r4, #0]
 80025b2:	1961      	adds	r1, r4, r5
 80025b4:	428b      	cmp	r3, r1
 80025b6:	bf04      	itt	eq
 80025b8:	6819      	ldreq	r1, [r3, #0]
 80025ba:	685b      	ldreq	r3, [r3, #4]
 80025bc:	6063      	str	r3, [r4, #4]
 80025be:	bf04      	itt	eq
 80025c0:	1949      	addeq	r1, r1, r5
 80025c2:	6021      	streq	r1, [r4, #0]
 80025c4:	6054      	str	r4, [r2, #4]
 80025c6:	e7c7      	b.n	8002558 <_free_r+0x28>
 80025c8:	b003      	add	sp, #12
 80025ca:	bd30      	pop	{r4, r5, pc}
 80025cc:	20000098 	.word	0x20000098

080025d0 <_malloc_r>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	1ccd      	adds	r5, r1, #3
 80025d4:	f025 0503 	bic.w	r5, r5, #3
 80025d8:	3508      	adds	r5, #8
 80025da:	2d0c      	cmp	r5, #12
 80025dc:	bf38      	it	cc
 80025de:	250c      	movcc	r5, #12
 80025e0:	2d00      	cmp	r5, #0
 80025e2:	4606      	mov	r6, r0
 80025e4:	db01      	blt.n	80025ea <_malloc_r+0x1a>
 80025e6:	42a9      	cmp	r1, r5
 80025e8:	d903      	bls.n	80025f2 <_malloc_r+0x22>
 80025ea:	230c      	movs	r3, #12
 80025ec:	6033      	str	r3, [r6, #0]
 80025ee:	2000      	movs	r0, #0
 80025f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025f2:	f000 f87d 	bl	80026f0 <__malloc_lock>
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <_malloc_r+0xac>)
 80025f8:	680a      	ldr	r2, [r1, #0]
 80025fa:	4614      	mov	r4, r2
 80025fc:	b99c      	cbnz	r4, 8002626 <_malloc_r+0x56>
 80025fe:	4f20      	ldr	r7, [pc, #128]	; (8002680 <_malloc_r+0xb0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b923      	cbnz	r3, 800260e <_malloc_r+0x3e>
 8002604:	4621      	mov	r1, r4
 8002606:	4630      	mov	r0, r6
 8002608:	f000 f862 	bl	80026d0 <_sbrk_r>
 800260c:	6038      	str	r0, [r7, #0]
 800260e:	4629      	mov	r1, r5
 8002610:	4630      	mov	r0, r6
 8002612:	f000 f85d 	bl	80026d0 <_sbrk_r>
 8002616:	1c43      	adds	r3, r0, #1
 8002618:	d123      	bne.n	8002662 <_malloc_r+0x92>
 800261a:	230c      	movs	r3, #12
 800261c:	6033      	str	r3, [r6, #0]
 800261e:	4630      	mov	r0, r6
 8002620:	f000 f86c 	bl	80026fc <__malloc_unlock>
 8002624:	e7e3      	b.n	80025ee <_malloc_r+0x1e>
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	1b5b      	subs	r3, r3, r5
 800262a:	d417      	bmi.n	800265c <_malloc_r+0x8c>
 800262c:	2b0b      	cmp	r3, #11
 800262e:	d903      	bls.n	8002638 <_malloc_r+0x68>
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	441c      	add	r4, r3
 8002634:	6025      	str	r5, [r4, #0]
 8002636:	e004      	b.n	8002642 <_malloc_r+0x72>
 8002638:	6863      	ldr	r3, [r4, #4]
 800263a:	42a2      	cmp	r2, r4
 800263c:	bf0c      	ite	eq
 800263e:	600b      	streq	r3, [r1, #0]
 8002640:	6053      	strne	r3, [r2, #4]
 8002642:	4630      	mov	r0, r6
 8002644:	f000 f85a 	bl	80026fc <__malloc_unlock>
 8002648:	f104 000b 	add.w	r0, r4, #11
 800264c:	1d23      	adds	r3, r4, #4
 800264e:	f020 0007 	bic.w	r0, r0, #7
 8002652:	1ac2      	subs	r2, r0, r3
 8002654:	d0cc      	beq.n	80025f0 <_malloc_r+0x20>
 8002656:	1a1b      	subs	r3, r3, r0
 8002658:	50a3      	str	r3, [r4, r2]
 800265a:	e7c9      	b.n	80025f0 <_malloc_r+0x20>
 800265c:	4622      	mov	r2, r4
 800265e:	6864      	ldr	r4, [r4, #4]
 8002660:	e7cc      	b.n	80025fc <_malloc_r+0x2c>
 8002662:	1cc4      	adds	r4, r0, #3
 8002664:	f024 0403 	bic.w	r4, r4, #3
 8002668:	42a0      	cmp	r0, r4
 800266a:	d0e3      	beq.n	8002634 <_malloc_r+0x64>
 800266c:	1a21      	subs	r1, r4, r0
 800266e:	4630      	mov	r0, r6
 8002670:	f000 f82e 	bl	80026d0 <_sbrk_r>
 8002674:	3001      	adds	r0, #1
 8002676:	d1dd      	bne.n	8002634 <_malloc_r+0x64>
 8002678:	e7cf      	b.n	800261a <_malloc_r+0x4a>
 800267a:	bf00      	nop
 800267c:	20000098 	.word	0x20000098
 8002680:	2000009c 	.word	0x2000009c

08002684 <_realloc_r>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	4607      	mov	r7, r0
 8002688:	4614      	mov	r4, r2
 800268a:	460e      	mov	r6, r1
 800268c:	b921      	cbnz	r1, 8002698 <_realloc_r+0x14>
 800268e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002692:	4611      	mov	r1, r2
 8002694:	f7ff bf9c 	b.w	80025d0 <_malloc_r>
 8002698:	b922      	cbnz	r2, 80026a4 <_realloc_r+0x20>
 800269a:	f7ff ff49 	bl	8002530 <_free_r>
 800269e:	4625      	mov	r5, r4
 80026a0:	4628      	mov	r0, r5
 80026a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a4:	f000 f830 	bl	8002708 <_malloc_usable_size_r>
 80026a8:	42a0      	cmp	r0, r4
 80026aa:	d20f      	bcs.n	80026cc <_realloc_r+0x48>
 80026ac:	4621      	mov	r1, r4
 80026ae:	4638      	mov	r0, r7
 80026b0:	f7ff ff8e 	bl	80025d0 <_malloc_r>
 80026b4:	4605      	mov	r5, r0
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d0f2      	beq.n	80026a0 <_realloc_r+0x1c>
 80026ba:	4631      	mov	r1, r6
 80026bc:	4622      	mov	r2, r4
 80026be:	f7ff ff0f 	bl	80024e0 <memcpy>
 80026c2:	4631      	mov	r1, r6
 80026c4:	4638      	mov	r0, r7
 80026c6:	f7ff ff33 	bl	8002530 <_free_r>
 80026ca:	e7e9      	b.n	80026a0 <_realloc_r+0x1c>
 80026cc:	4635      	mov	r5, r6
 80026ce:	e7e7      	b.n	80026a0 <_realloc_r+0x1c>

080026d0 <_sbrk_r>:
 80026d0:	b538      	push	{r3, r4, r5, lr}
 80026d2:	4d06      	ldr	r5, [pc, #24]	; (80026ec <_sbrk_r+0x1c>)
 80026d4:	2300      	movs	r3, #0
 80026d6:	4604      	mov	r4, r0
 80026d8:	4608      	mov	r0, r1
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	f7fe fe42 	bl	8001364 <_sbrk>
 80026e0:	1c43      	adds	r3, r0, #1
 80026e2:	d102      	bne.n	80026ea <_sbrk_r+0x1a>
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	b103      	cbz	r3, 80026ea <_sbrk_r+0x1a>
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	bd38      	pop	{r3, r4, r5, pc}
 80026ec:	200003a8 	.word	0x200003a8

080026f0 <__malloc_lock>:
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <__malloc_lock+0x8>)
 80026f2:	f000 b811 	b.w	8002718 <__retarget_lock_acquire_recursive>
 80026f6:	bf00      	nop
 80026f8:	200003b0 	.word	0x200003b0

080026fc <__malloc_unlock>:
 80026fc:	4801      	ldr	r0, [pc, #4]	; (8002704 <__malloc_unlock+0x8>)
 80026fe:	f000 b80c 	b.w	800271a <__retarget_lock_release_recursive>
 8002702:	bf00      	nop
 8002704:	200003b0 	.word	0x200003b0

08002708 <_malloc_usable_size_r>:
 8002708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800270c:	1f18      	subs	r0, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	bfbc      	itt	lt
 8002712:	580b      	ldrlt	r3, [r1, r0]
 8002714:	18c0      	addlt	r0, r0, r3
 8002716:	4770      	bx	lr

08002718 <__retarget_lock_acquire_recursive>:
 8002718:	4770      	bx	lr

0800271a <__retarget_lock_release_recursive>:
 800271a:	4770      	bx	lr

0800271c <_init>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	bf00      	nop
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr

08002728 <_fini>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr
